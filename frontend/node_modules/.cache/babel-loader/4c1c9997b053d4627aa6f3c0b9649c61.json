{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._headers = headers;\n    this._baseUrl = baseUrl;\n  }\n\n  _getResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(res.status);\n    }\n  } //1.Загрузка инф-ции о пользователе с сервера  \n\n\n  getProfile() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers\n    }).then(this._getResponse).catch(console.log);\n  } // 2.Загрузка карточек с сервера\n\n\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers\n    }).then(this._getResponse).catch(console.log);\n  } //3.Редактирование профиля\n\n\n  editProfile(name, about) {\n    console.log('editProfile');\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        about\n      })\n    }).then(this._getResponse).catch(console.log);\n  } //4.Добавление карточки\n\n\n  addCard(name, link) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        link\n      })\n    }).then(this._getResponse).catch(console.log);\n  } //7. Удаление карточки\n\n\n  deleteCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}`, {\n      method: \"DELETE\",\n      headers: this._headers\n    }).then(this._getResponse).catch(console.log);\n  } // 8. Постановка и снятие лайка\n\n\n  deleteLike(id) {\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n      method: \"DELETE\",\n      headers: this._headers\n    }).then(this._getResponse).catch(console.log);\n  }\n\n  addLike(id) {\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n      method: \"PUT\",\n      headers: this._headers\n    }).then(this._getResponse).catch(console.log);\n  } // 9. Обновление аватара пользователя\n\n\n  updateAvatar(avatar) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar\n      })\n    }).then(this._getResponse); // .catch(console.log)\n    // .then(res => {\n    //   console.log('res', res)\n    // })      \n  }\n\n}\n\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-39',\n  headers: {\n    authorization: '7ad94de5-0f27-4b33-9685-c939c2500319',\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"sources":["C:/Users/kraskova/dev/mesto-react/src/utils/api.js"],"names":["Api","constructor","baseUrl","headers","_headers","_baseUrl","_getResponse","res","ok","json","Promise","reject","status","getProfile","fetch","then","catch","console","log","getInitialCards","editProfile","name","about","method","body","JSON","stringify","addCard","link","deleteCard","id","deleteLike","addLike","updateAvatar","avatar","api","authorization"],"mappings":"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","sourcesContent":["class Api {\r\n  constructor({baseUrl, headers}) {\r\n    this._headers = headers\r\n    this._baseUrl = baseUrl\r\n  }\r\n  \r\n  _getResponse(res) {\r\n    if (res.ok) {\r\n      return res.json();\r\n    } else {\r\n      return Promise.reject(res.status)\r\n    }\r\n  }\r\n \r\n  //1.Загрузка инф-ции о пользователе с сервера  \r\n  getProfile() {\r\n    return fetch(`${this._baseUrl}/users/me`, {\r\n        headers: this._headers\r\n    })\r\n    .then(this._getResponse)\r\n    .catch(console.log)\r\n  }\r\n\r\n  // 2.Загрузка карточек с сервера\r\n  getInitialCards() {\r\n    return fetch(`${this._baseUrl}/cards`, {\r\n        headers: this._headers\r\n    })\r\n    .then(this._getResponse)\r\n    .catch(console.log)  \r\n  }\r\n  \r\n  //3.Редактирование профиля\r\n  editProfile(name, about) {\r\n    console.log('editProfile')\r\n    return fetch(`${this._baseUrl}/users/me`, {\r\n      method: \"PATCH\",  \r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        name,\r\n        about\r\n      })\r\n    })\r\n    .then(this._getResponse)\r\n    .catch(console.log)  \r\n  }\r\n\r\n  //4.Добавление карточки\r\n  addCard(name, link) {\r\n    return fetch(`${this._baseUrl}/cards`, {\r\n      method: \"POST\",  \r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        name, \r\n        link\r\n      })\r\n    })\r\n    .then(this._getResponse)\r\n    .catch(console.log)  \r\n  }\r\n  \r\n  //7. Удаление карточки\r\n  deleteCard(id) {\r\n    return fetch(`${this._baseUrl}/cards/${id}`, {\r\n      method: \"DELETE\",  \r\n      headers: this._headers\r\n      \r\n    })\r\n    .then(this._getResponse)\r\n    .catch(console.log)  \r\n  }\r\n\r\n  // 8. Постановка и снятие лайка\r\n  deleteLike(id) {\r\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\r\n      method: \"DELETE\",  \r\n      headers: this._headers\r\n    })\r\n    .then(this._getResponse)\r\n    .catch(console.log)  \r\n  } \r\n\r\n  addLike(id) {\r\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\r\n      method: \"PUT\",  \r\n      headers: this._headers\r\n    })\r\n    .then(this._getResponse)\r\n    .catch(console.log)  \r\n  }\r\n\r\n  // 9. Обновление аватара пользователя\r\n  updateAvatar(avatar) {\r\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\r\n      method: \"PATCH\",  \r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        avatar\r\n      })\r\n    })\r\n    .then(this._getResponse)  \r\n    // .catch(console.log)\r\n    // .then(res => {\r\n    //   console.log('res', res)\r\n    // })      \r\n  }\r\n}\r\n  \r\nconst api = new Api({\r\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-39',\r\n    headers: {\r\n      authorization: '7ad94de5-0f27-4b33-9685-c939c2500319',\r\n      'Content-Type': 'application/json'\r\n    }\r\n});\r\n\r\nexport default api;"]},"metadata":{},"sourceType":"module"}