{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kraskova\\\\dev\\\\mesto-react\\\\src\\\\components\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect, useContext } from 'react';\nimport api from '../utils/api';\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\nimport PopupWithForm from './PopupWithForm';\nimport EditProfilePopup from './EditProfilePopup';\nimport EditAvatarPopup from './EditAvatarPopup';\nimport AddPlacePopup from './AddPlacePopup';\nimport ImagePopup from './ImagePopup';\nimport Card from './Card';\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // Стейты для попапов (принимает состояние открыт(true), закрыт (False))\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = useState(false);\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = useState(false); // Стейты для карточек\n\n  const [isSelectedCard, setSelectedCard] = useState(null);\n  const [cards, setCards] = useState([]); // Стейт для данных пользователя\n\n  const [currentUser, setCurrentUser] = useState({\n    name: 'testName',\n    about: 'testDescription',\n    avatar: 'tesrAvatar'\n  }); //Создать обработчик handleUpdateUser. Внутри этого обработчика вызовите api.getProfile\n  //добавьте handleUpdateAvatar, вызывающий api.setUserAvatar\n  // useEffect(() => {\n  //   Promise.all([api.getProfile(), api.getInitialCards()])\n  //   .then(([user, cards]) => {\n  //     setCurrentUser(user);\n  //     setCards(cards);\n  //   })\n  //   .catch((err) => {\n  //     console.error(err);\n  //   });\n  // }, []);\n\n  useEffect(() => {\n    api.getProfile().then(user => {\n      setCurrentUser(user);\n    }).catch(err => {\n      console.error(err);\n    });\n    api.getInitialCards().then(cards => setCards(cards)).catch(err => {\n      console.error(err);\n    });\n  }, []); // function handleUpdateUser(data) {\n  //   api.updateUserInfo(data)\n  //   .then((newUser) => {\n  //     setCurrentUser(newUser);\n  //     closeAllPopups();\n  //   })\n  //   .catch((err) => {\n  //     console.error(err);\n  //   });\n  // }\n  // //Функция постановки лайков\n  // function handleCardLike(card) {\n  //   // Проверяем, есть ли уже лайк на карточке\n  //   const isLiked = card.likes.some(i => i._id === currentUser._id);\n  //   // Отправляем запрос в API и получаем обновлённые данные карточки\n  //   api.changeLikeCardStatus(card._id, !isLiked).then((newCard) => {\n  //       setCards((state) => state.map((c) => c._id === card._id ? newCard : c));\n  //   });\n  // }\n  // //Функция удаления карточки\n  // function handleCardDelete(card) {\n  //   api.deleteCard(card._id)\n  //       .then(() => {\n  //           setCards(cards.filter((item) => item !== card))\n  //       })\n  //       .catch((err) => {\n  //           console.log(err);\n  //       })\n  // }\n  // Открытие попапа редактирования аватара\n\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(true);\n  } // Открытие попапа редактирования профиля\n\n\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(true);\n  } // Открытие попапа добавления места\n\n\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(true);\n  } // Закрытие попапа\n\n\n  function closeAllPopups() {\n    setIsEditAvatarPopupOpen(false);\n    setIsEditProfilePopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setSelectedCard(null);\n  } // Обработчик клика по изображению\n\n\n  function handleCardClick(card) {\n    setSelectedCard(card);\n  }\n\n  return /*#__PURE__*/_jsxDEV(CurrentUserContext.Provider, {\n    value: currentUser,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Main, {\n            onEditAvatar: handleEditAvatarClick,\n            onEditProfile: handleEditProfileClick,\n            onAddPlace: handleAddPlaceClick,\n            onCardClick: handleCardClick // onCardLike={handleCardLike}\n            // onCardDelete={handleCardDelete}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(EditProfilePopup, {\n            isOpen: isEditProfilePopupOpen,\n            onClose: closeAllPopups // onUpdateUser={handleUpdateUser}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(EditAvatarPopup, {\n            isOpen: isEditAvatarPopupOpen,\n            onClose: closeAllPopups // onUpdateAvatar={handleUpdateAvatar}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(AddPlacePopup, {\n            isOpen: isAddPlacePopupOpen,\n            onClose: closeAllPopups // onAddPlace={handleAddPlace}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ImagePopup, {\n            card: isSelectedCard,\n            onClose: closeAllPopups\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"WauFuZkyLFzCJq1bv9PaGI67KfE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/kraskova/dev/mesto-react/src/components/App.js"],"names":["React","useState","useEffect","useContext","api","Header","Main","Footer","PopupWithForm","EditProfilePopup","EditAvatarPopup","AddPlacePopup","ImagePopup","Card","CurrentUserContext","App","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","isEditProfilePopupOpen","setIsEditProfilePopupOpen","isAddPlacePopupOpen","setIsAddPlacePopupOpen","isSelectedCard","setSelectedCard","cards","setCards","currentUser","setCurrentUser","name","about","avatar","getProfile","then","user","catch","err","console","error","getInitialCards","handleEditAvatarClick","handleEditProfileClick","handleAddPlaceClick","closeAllPopups","handleCardClick","card"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {useState, useEffect, useContext} from 'react';\nimport api from '../utils/api';\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\nimport PopupWithForm from './PopupWithForm';\nimport EditProfilePopup from './EditProfilePopup';\nimport EditAvatarPopup from './EditAvatarPopup';\nimport AddPlacePopup from './AddPlacePopup';\nimport ImagePopup from './ImagePopup';\nimport Card from './Card';\n\nimport { CurrentUserContext} from '../contexts/CurrentUserContext';\n\n\nfunction App() {\n  // Стейты для попапов (принимает состояние открыт(true), закрыт (False))\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = useState(false);\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = useState(false);\n  \n  // Стейты для карточек\n  const [isSelectedCard, setSelectedCard] = useState(null);\n  const [cards, setCards] = useState([]);\n\n // Стейт для данных пользователя\n  const [currentUser, setCurrentUser] = useState({\n    name: 'testName',\n    about: 'testDescription',\n    avatar: 'tesrAvatar'\n  });\n\n  //Создать обработчик handleUpdateUser. Внутри этого обработчика вызовите api.getProfile\n  //добавьте handleUpdateAvatar, вызывающий api.setUserAvatar\n  \n  // useEffect(() => {\n  //   Promise.all([api.getProfile(), api.getInitialCards()])\n  //   .then(([user, cards]) => {\n  //     setCurrentUser(user);\n  //     setCards(cards);\n  //   })\n  //   .catch((err) => {\n  //     console.error(err);\n  //   });\n  // }, []);\n\n  useEffect(() => {\n    api.getProfile()\n      .then((user) => {\n        setCurrentUser(user)\n      })\n      .catch((err) => {\n        console.error(err);\n      })\n \n    api.getInitialCards()\n      .then((cards) => setCards(cards))\n      .catch((err) => {\n        console.error(err);\n      })\n\n  }, [])\n\n  // function handleUpdateUser(data) {\n  //   api.updateUserInfo(data)\n  //   .then((newUser) => {\n  //     setCurrentUser(newUser);\n  //     closeAllPopups();\n  //   })\n  //   .catch((err) => {\n  //     console.error(err);\n  //   });\n  // }\n\n  // //Функция постановки лайков\n  // function handleCardLike(card) {\n  //   // Проверяем, есть ли уже лайк на карточке\n  //   const isLiked = card.likes.some(i => i._id === currentUser._id);\n    \n  //   // Отправляем запрос в API и получаем обновлённые данные карточки\n  //   api.changeLikeCardStatus(card._id, !isLiked).then((newCard) => {\n  //       setCards((state) => state.map((c) => c._id === card._id ? newCard : c));\n  //   });\n  // }\n\n  // //Функция удаления карточки\n  // function handleCardDelete(card) {\n  //   api.deleteCard(card._id)\n  //       .then(() => {\n  //           setCards(cards.filter((item) => item !== card))\n  //       })\n  //       .catch((err) => {\n  //           console.log(err);\n  //       })\n  // }\n\n  \n  // Открытие попапа редактирования аватара\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(true);\n  }\n  \n  // Открытие попапа редактирования профиля\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(true);\n  }\n  \n  // Открытие попапа добавления места\n  function  handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(true);\n  }\n  \n  // Закрытие попапа\n  function closeAllPopups() {\n    setIsEditAvatarPopupOpen(false);\n    setIsEditProfilePopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setSelectedCard(null);\n  }\n\n  // Обработчик клика по изображению\n  function handleCardClick(card) {\n    setSelectedCard(card);\n  }\n\n  return (\n    <CurrentUserContext.Provider value={currentUser}>\n      <div className=\"App\">\n        <div className=\"page\">\n          <div className=\"content\">\n            <Header />\n            <Main \n              onEditAvatar={handleEditAvatarClick} \n              onEditProfile={handleEditProfileClick} \n              onAddPlace={handleAddPlaceClick}\n              onCardClick={handleCardClick}\n              // onCardLike={handleCardLike}\n              // onCardDelete={handleCardDelete}\n            />\n            <Footer />\n            \n            <EditProfilePopup \n              isOpen={isEditProfilePopupOpen} \n              onClose={closeAllPopups}\n              // onUpdateUser={handleUpdateUser}\n            />\n            <EditAvatarPopup \n              isOpen={isEditAvatarPopupOpen} \n              onClose={closeAllPopups}\n              // onUpdateAvatar={handleUpdateAvatar}\n            />\n            <AddPlacePopup \n              isOpen={isAddPlacePopupOpen} \n              onClose={closeAllPopups}\n              // onAddPlace={handleAddPlace}\n            />\n            <ImagePopup\n              card={isSelectedCard}\n              onClose={closeAllPopups}\n            />\n          </div>\n        </div>\n      </div>\n    </CurrentUserContext.Provider> \n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}