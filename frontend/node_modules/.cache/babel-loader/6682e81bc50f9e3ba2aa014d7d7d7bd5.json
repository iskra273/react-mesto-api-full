{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kraskova\\\\dev\\\\mesto-react\\\\src\\\\components\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport '../utils/api';\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\nimport PopupWithForm from './PopupWithForm';\nimport ImagePopup from './ImagePopup';\nimport Card from './Card';\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // Стейты для попапов (принимает состояние открыт(true), закрыт (False))\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = React.useState(false);\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = React.useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false); // Стейт для карточек\n\n  const [isSelectedCard, setSelectedCard] = React.useState(null); // Стейт для карточек (вызывает api.getProfile() и обновляет стейт-переменную из полученного значения)\n  //const [iscurrentUser, setCurrentUser] = React.useState({});\n  //Создать обработчик handleUpdateUser. Внутри этого обработчика вызовите api.getProfile\n  //добавьте handleUpdateAvatar, вызывающий api.setUserAvatar\n  // api.getProfile()\n  // .then(res => {\n  //   userInfo.setUserInfo(res.name, res.about, res.avatar)\n  //   userId = res._id\n  // })\n  // .catch((err) => {\n  //   console.error(err);\n  // })\n  // useEffect(() => {\n  //   api.getProfile()\n  //     .then((data) => {\n  //       setUserName(data.name);\n  //       setUserDescription(data.about);\n  //       setUserAvatar(data.avatar);\n  //     })\n  //     .catch((err) => {\n  //       console.error(err);\n  //     })\n  // }, [])\n  // Открытие попапа редактирования аватара\n\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(true);\n  } // Открытие попапа редактирования профиля\n\n\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(true);\n  } // Открытие попапа добавления места\n\n\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(true);\n  } // Закрытие попапа\n\n\n  function closeAllPopups() {\n    setIsEditAvatarPopupOpen(false);\n    setIsEditProfilePopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setSelectedCard(null);\n  } // Обработчик клика по изображению\n\n\n  function handleCardClick(card) {\n    setSelectedCard(card);\n  }\n\n  return /*#__PURE__*/_jsxDEV(CurrentUserContext.Provider, {\n    value: currentUser,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Main, {\n            onEditAvatar: handleEditAvatarClick,\n            onEditProfile: handleEditProfileClick,\n            onAddPlace: handleAddPlaceClick,\n            onCardClick: handleCardClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(EditProfilePopup, {\n            isOpen: isEditProfilePopupOpen,\n            onClose: closeAllPopups\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(PopupWithForm, {\n            name: 'avatar',\n            title: 'Обновить автар',\n            buttonText: 'Сохранить',\n            isOpen: isEditAvatarPopupOpen,\n            onClose: closeAllPopups,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"popup__input popup__input_name_add-link\",\n              id: \"img-input\",\n              type: \"url\",\n              minLength: 1,\n              name: \"link\",\n              required: \"\",\n              placeholder: \"\\u0421\\u0441\\u044B\\u043B\\u043A\\u0430 \\u043D\\u0430 \\u043A\\u0430\\u0440\\u0442\\u0438\\u043D\\u043A\\u0443\",\n              defaultValue: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              id: \"error-img-input\",\n              className: \"popup__error popup__error_visible\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(PopupWithForm, {\n            name: \"add-element\",\n            title: \"\\u041D\\u043E\\u0432\\u043E\\u0435 \\u043C\\u0435\\u0441\\u0442\\u043E\",\n            buttonText: 'Создать',\n            isOpen: isAddPlacePopupOpen,\n            onClose: closeAllPopups,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"name-input\",\n              type: \"text\",\n              name: \"name\",\n              required: \"\",\n              minLength: 2,\n              maxLength: 30,\n              className: \"popup__input popup__input_name_add-name\",\n              placeholder: \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435\",\n              defaultValue: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              id: \"error-name-input\",\n              className: \"popup__error popup__error_visible\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"link-input\",\n              type: \"url\",\n              minLength: 1,\n              name: \"link\",\n              required: \"\",\n              className: \"popup__input popup__input_name_add-link\",\n              placeholder: \"\\u0421\\u0441\\u044B\\u043B\\u043A\\u0430 \\u043D\\u0430 \\u043A\\u0430\\u0440\\u0442\\u0438\\u043D\\u043A\\u0443\",\n              defaultValue: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              id: \"error-link-input\",\n              className: \"popup__error popup__error_visible\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ImagePopup, {\n            card: isSelectedCard,\n            onClose: closeAllPopups\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"rROzx5DnuZhtF6HdZkxjote0Go4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/kraskova/dev/mesto-react/src/components/App.js"],"names":["React","Header","Main","Footer","PopupWithForm","ImagePopup","Card","CurrentUserContext","App","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","useState","isEditProfilePopupOpen","setIsEditProfilePopupOpen","isAddPlacePopupOpen","setIsAddPlacePopupOpen","isSelectedCard","setSelectedCard","handleEditAvatarClick","handleEditProfileClick","handleAddPlaceClick","closeAllPopups","handleCardClick","card","currentUser"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,cAAP;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,kBAAT,QAAkC,gCAAlC;;;AAGA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA,QAAM,CAACC,qBAAD,EAAwBC,wBAAxB,IAAoDV,KAAK,CAACW,QAAN,CAAe,KAAf,CAA1D;AACA,QAAM,CAACC,sBAAD,EAAyBC,yBAAzB,IAAsDb,KAAK,CAACW,QAAN,CAAe,KAAf,CAA5D;AACA,QAAM,CAACG,mBAAD,EAAsBC,sBAAtB,IAAgDf,KAAK,CAACW,QAAN,CAAe,KAAf,CAAtD,CAJa,CAMb;;AACA,QAAM,CAACK,cAAD,EAAiBC,eAAjB,IAAoCjB,KAAK,CAACW,QAAN,CAAe,IAAf,CAA1C,CAPa,CASd;AACC;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,WAASO,qBAAT,GAAiC;AAC/BR,IAAAA,wBAAwB,CAAC,IAAD,CAAxB;AACD,GAxCY,CA0Cb;;;AACA,WAASS,sBAAT,GAAkC;AAChCN,IAAAA,yBAAyB,CAAC,IAAD,CAAzB;AACD,GA7CY,CA+Cb;;;AACA,WAAUO,mBAAV,GAAgC;AAC9BL,IAAAA,sBAAsB,CAAC,IAAD,CAAtB;AACD,GAlDY,CAoDb;;;AACA,WAASM,cAAT,GAA0B;AACxBX,IAAAA,wBAAwB,CAAC,KAAD,CAAxB;AACAG,IAAAA,yBAAyB,CAAC,KAAD,CAAzB;AACAE,IAAAA,sBAAsB,CAAC,KAAD,CAAtB;AACAE,IAAAA,eAAe,CAAC,IAAD,CAAf;AACD,GA1DY,CA6Db;;;AACA,WAASK,eAAT,CAAyBC,IAAzB,EAA+B;AAC7BN,IAAAA,eAAe,CAACM,IAAD,CAAf;AACD;;AAED,sBACE,QAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAEC,WAApC;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,SAAf;AAAA,kCACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,IAAD;AACE,YAAA,YAAY,EAAEN,qBADhB;AAEE,YAAA,aAAa,EAAEC,sBAFjB;AAGE,YAAA,UAAU,EAAEC,mBAHd;AAIE,YAAA,WAAW,EAAEE;AAJf;AAAA;AAAA;AAAA;AAAA,kBAFF,eAQE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,kBARF,eAUE,QAAC,gBAAD;AAAkB,YAAA,MAAM,EAAEV,sBAA1B;AAAkD,YAAA,OAAO,EAAES;AAA3D;AAAA;AAAA;AAAA;AAAA,kBAVF,eAaE,QAAC,aAAD;AACE,YAAA,IAAI,EAAE,QADR;AAEE,YAAA,KAAK,EAAE,gBAFT;AAGE,YAAA,UAAU,EAAE,WAHd;AAIE,YAAA,MAAM,EAAEZ,qBAJV;AAKE,YAAA,OAAO,EAAEY,cALX;AAAA,oCAOE;AACI,cAAA,SAAS,EAAC,yCADd;AAEI,cAAA,EAAE,EAAC,WAFP;AAGI,cAAA,IAAI,EAAC,KAHT;AAII,cAAA,SAAS,EAAE,CAJf;AAKI,cAAA,IAAI,EAAC,MALT;AAMI,cAAA,QAAQ,EAAC,EANb;AAOI,cAAA,WAAW,EAAC,oGAPhB;AAQI,cAAA,YAAY,EAAC;AARjB;AAAA;AAAA;AAAA;AAAA,oBAPF,eAiBE;AACI,cAAA,EAAE,EAAC,iBADP;AAEI,cAAA,SAAS,EAAC;AAFd;AAAA;AAAA;AAAA;AAAA,oBAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAbF,eAoCE,QAAC,aAAD;AACE,YAAA,IAAI,EAAC,aADP;AAEE,YAAA,KAAK,EAAC,+DAFR;AAGE,YAAA,UAAU,EAAE,SAHd;AAIE,YAAA,MAAM,EAAEP,mBAJV;AAKE,YAAA,OAAO,EAAEO,cALX;AAAA,oCAOE;AACI,cAAA,EAAE,EAAC,YADP;AAEI,cAAA,IAAI,EAAC,MAFT;AAGI,cAAA,IAAI,EAAC,MAHT;AAII,cAAA,QAAQ,EAAC,EAJb;AAKI,cAAA,SAAS,EAAE,CALf;AAMI,cAAA,SAAS,EAAE,EANf;AAOI,cAAA,SAAS,EAAC,yCAPd;AAQI,cAAA,WAAW,EAAC,kDARhB;AASI,cAAA,YAAY,EAAC;AATjB;AAAA;AAAA;AAAA;AAAA,oBAPF,eAkBI;AACE,cAAA,EAAE,EAAC,kBADL;AAEE,cAAA,SAAS,EAAC;AAFZ;AAAA;AAAA;AAAA;AAAA,oBAlBJ,eAsBI;AACE,cAAA,EAAE,EAAC,YADL;AAEE,cAAA,IAAI,EAAC,KAFP;AAGE,cAAA,SAAS,EAAE,CAHb;AAIE,cAAA,IAAI,EAAC,MAJP;AAKE,cAAA,QAAQ,EAAC,EALX;AAME,cAAA,SAAS,EAAC,yCANZ;AAOE,cAAA,WAAW,EAAC,oGAPd;AAQE,cAAA,YAAY,EAAC;AARf;AAAA;AAAA;AAAA;AAAA,oBAtBJ,eAgCI;AACE,cAAA,EAAE,EAAC,kBADL;AAEE,cAAA,SAAS,EAAC;AAFZ;AAAA;AAAA;AAAA;AAAA,oBAhCJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBApCF,eAyEE,QAAC,UAAD;AACE,YAAA,IAAI,EAAEL,cADR;AAEE,YAAA,OAAO,EAAEK;AAFX;AAAA;AAAA;AAAA;AAAA,kBAzEF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAuFD;;GAzJQb,G;;KAAAA,G;AA2JT,eAAeA,GAAf","sourcesContent":["import React from 'react';\nimport '../utils/api';\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\nimport PopupWithForm from './PopupWithForm';\nimport ImagePopup from './ImagePopup';\nimport Card from './Card';\nimport { CurrentUserContext} from '../contexts/CurrentUserContext';\n\n\nfunction App() {\n  // Стейты для попапов (принимает состояние открыт(true), закрыт (False))\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = React.useState(false);\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = React.useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false);\n  \n  // Стейт для карточек\n  const [isSelectedCard, setSelectedCard] = React.useState(null);\n\n // Стейт для карточек (вызывает api.getProfile() и обновляет стейт-переменную из полученного значения)\n  //const [iscurrentUser, setCurrentUser] = React.useState({});\n\n  //Создать обработчик handleUpdateUser. Внутри этого обработчика вызовите api.getProfile\n  //добавьте handleUpdateAvatar, вызывающий api.setUserAvatar\n  \n  // api.getProfile()\n  // .then(res => {\n  //   userInfo.setUserInfo(res.name, res.about, res.avatar)\n  //   userId = res._id\n  // })\n  // .catch((err) => {\n  //   console.error(err);\n  // })\n\n\n  // useEffect(() => {\n  //   api.getProfile()\n  //     .then((data) => {\n  //       setUserName(data.name);\n  //       setUserDescription(data.about);\n  //       setUserAvatar(data.avatar);\n  //     })\n  //     .catch((err) => {\n  //       console.error(err);\n  //     })\n  // }, [])\n\n  // Открытие попапа редактирования аватара\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(true);\n  }\n  \n  // Открытие попапа редактирования профиля\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(true);\n  }\n  \n  // Открытие попапа добавления места\n  function  handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(true);\n  }\n  \n  // Закрытие попапа\n  function closeAllPopups() {\n    setIsEditAvatarPopupOpen(false);\n    setIsEditProfilePopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setSelectedCard(null);\n  }\n\n  \n  // Обработчик клика по изображению\n  function handleCardClick(card) {\n    setSelectedCard(card);\n  }\n\n  return (\n    <CurrentUserContext.Provider value={currentUser}>\n      <div className=\"App\">\n        <div className=\"page\">\n          <div className=\"content\">\n            <Header />\n            <Main \n              onEditAvatar={handleEditAvatarClick} \n              onEditProfile={handleEditProfileClick} \n              onAddPlace={handleAddPlaceClick}\n              onCardClick={handleCardClick}\n            />\n            <Footer />\n            \n            <EditProfilePopup isOpen={isEditProfilePopupOpen} onClose={closeAllPopups} />\n            {/* <EditAvatarPopup isOpen={isEditAvatarPopupOpen} onClose={closeAllPopups} /> */}\n            \n            <PopupWithForm\n              name={'avatar'}\n              title={'Обновить автар'}\n              buttonText={'Сохранить'}\n              isOpen={isEditAvatarPopupOpen}\n              onClose={closeAllPopups}\n            >\n              <input\n                  className=\"popup__input popup__input_name_add-link\"\n                  id=\"img-input\"\n                  type=\"url\"\n                  minLength={1}\n                  name=\"link\"\n                  required=\"\"\n                  placeholder=\"Ссылка на картинку\"\n                  defaultValue=\"\"\n                />\n              <span\n                  id=\"error-img-input\"\n                  className=\"popup__error popup__error_visible\"\n                />\n            </PopupWithForm>\n            \n            <PopupWithForm\n              name='add-element'\n              title='Новое место'\n              buttonText={'Создать'}\n              isOpen={isAddPlacePopupOpen}\n              onClose={closeAllPopups}\n            >\n              <input\n                  id=\"name-input\"\n                  type=\"text\"\n                  name=\"name\"\n                  required=\"\"\n                  minLength={2}\n                  maxLength={30}\n                  className=\"popup__input popup__input_name_add-name\"\n                  placeholder=\"Название\"\n                  defaultValue=\"\"\n                />\n                <span\n                  id=\"error-name-input\"\n                  className=\"popup__error popup__error_visible\"\n                />\n                <input\n                  id=\"link-input\"\n                  type=\"url\"\n                  minLength={1}\n                  name=\"link\"\n                  required=\"\"\n                  className=\"popup__input popup__input_name_add-link\"\n                  placeholder=\"Ссылка на картинку\"\n                  defaultValue=\"\"\n                />\n                <span\n                  id=\"error-link-input\"\n                  className=\"popup__error popup__error_visible\"\n                />\n            </PopupWithForm>\n            <ImagePopup\n              card={isSelectedCard}\n              onClose={closeAllPopups}\n            />\n          </div>\n        </div>\n      </div>\n    </CurrentUserContext.Provider>\n    \n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}